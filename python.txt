1.定义user模型并连接数据库
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pydantic import BaseModel

# 创建一个连接到SQLite数据库的引擎
DATABASE_URL = "sqlite:///./test.db"  # 数据库文件名为test.db，位于当前目录
engine = create_engine(DATABASE_URL)

# 创建一个基本的映射模型
Base = declarative_base()

# 定义SQLAlchemy ORM User模型
class UserDB(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    full_name = Column(String)
    hashed_password = Column(String)

# 创建数据库表
Base.metadata.create_all(bind=engine)

# 创建数据库会话
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# 定义Pydantic User模型
class UserCreate(BaseModel):
    username: str
    email: str
    full_name: str
    hashed_password: str

class User(UserCreate):
    id: int

# 定义用于返回用户的模型（不包含敏感信息）
class UserInDB(User):
    class Config:
        orm_mode = True
2.用户注册
   # 定义密码哈希处理器
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
@app.post("/users/")
def create_user(user: UserCreate):
    # 创建数据库会话
    db = SessionLocal()
    try:
        # 将用户密码散列化
        hashed_password = pwd_context.hash(user.password)

        # 创建用户记录
        db_user = UserDB(**user.dict(), hashed_password=hashed_password)

        # 添加用户到数据库
        db.add(db_user)
        db.commit()
        db.refresh(db_user)

        return db_user

    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        db.close()	


3 创建一个路由 POST /token 来验证用户的用户名和密码。如果验证成功，则返回一个 JWT 令牌。
实现一个使用 JWT 令牌的依赖，该依赖能够在其他路由中用来验证和解码令牌。
# 生成JWT令牌的配置
SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# 创建JWT令牌
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# 路由来验证用户并生成JWT令牌
@app.post("/token")
def create_token(username: str, password: str, db: Session = Depends(get_db)):
    user = db.query(UserDB).filter(UserDB.username == username).first()
    if user is None or not pwd_context.verify(password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Incorrect username or password")

    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# 依赖函数，用于获取数据库会话
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


4.创建一个路由 GET /users/me/，它需要 JWT 令牌认证。当用户提供有效的令牌时，返回该用户的信息。
这个路由应该使用上述的 JWT 令牌依赖来验证和获取用户信息。
@app.get("/users/me/", response_model=UserDB)
def get_current_user(current_user: str = Depends(get_current_user)):
    # 通过当前用户的用户名从数据库中获取用户信息
    db = SessionLocal()
    user = db.query(UserDB).filter(UserDB.username == current_user).first()
    db.close()
    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user

5.为以下情况定义异常处理器：
当用户提供了无效的凭证（用户名或密码错误）时。
当用户尝试访问需要令牌的路由但未提供令牌或提供了无效的令牌时。

# 自定义异常处理器：处理用户名或密码错误
@app.exception_handler(HTTPException)
async def handle_invalid_credentials(request, exc: HTTPException):
    return JSONResponse(status_code=exc.status_code, content={"detail": "Invalid credentials"})

# 自定义异常处理器：处理未提供令牌或提供了无效令牌
@app.exception_handler(JWTError)
async def handle_jwt_error(request, exc: JWTError):
    return JSONResponse(status_code=401, content={"detail": "Could not validate credentials"})


6.如何实现用户密码的重置功能？考虑设计一个流程和相应的路由来实现这一功能。

（1）用户发送请求密码重置：用户需要提供与其帐户关联的电子邮件地址，并向服务器程序发送请求。

（2）生成密码重置令牌：服务器程序需要生成一个唯一的令牌，例如一个随机字符串，用于识别和验证密码重置请求。同时，该令牌应该有一个过期时间，以确保安全性。

（3）将令牌与用户关联：将生成的令牌与用户的帐户关联，以便在后续的步骤中验证令牌的有效性。

（4）发送密码重置链接：将包含令牌的重置链接发送给用户的注册电子邮件地址。这个链接通常包含一个指向密码重置页面的URL，该页面用于输入新密码。

（5）用户点击链接：用户点击包含令牌的密码重置链接，然后被重定向到密码重置页面。

（6）用户输入新密码：用户在密码重置页面上输入新密码。

（7）验证令牌：程序验证令牌的有效性，以确保该令牌仍然在有效期内，并且与用户的帐户关联。

（8）更新密码：如果令牌有效，接受用户提供的新密码，并使用密码哈希函数（例如bcrypt）对其进行散列。然后将新密码散列值保存到用户的帐户中。

# 设置一个字典保存和用户关联的令牌
reset_tokens = {}

# 生成密码重置令牌
def generate_reset_token():
    token_length = 32
    return ''.join(random.choices(string.ascii_letters + string.digits, k=token_length))

# 发送密码重置邮件（示例）
def send_reset_email(email, reset_token):
    reset_link = f"https://email.com/reset_password?token={reset_token}"
    print(f"Password reset link for {email}: {reset_link}")

# 路由：请求密码重置
@app.post("/reset_password/")
async def request_reset_password(email: str = Query(..., description="Email address")):
    if email not in users_db:
        raise HTTPException(status_code=404, detail="User not found")

    # 生成密码重置令牌
    reset_token = generate_reset_token()
    
    # 将令牌与用户关联，并设置令牌过期时间（示例设置为1小时）
    reset_tokens[reset_token] = {"email": email, "expires": datetime.utcnow() + timedelta(hours=1)}
    
    # 发送密码重置邮件
    send_reset_email(email, reset_token)
    
    return {"message": "Password reset email sent"}

# 路由：密码重置页面
@app.get("/reset_password/")
async def reset_password_page(token: str = Query(..., description="Password reset token")):
    # 检查令牌的有效性
    if token not in reset_tokens:
        raise HTTPException(status_code=404, detail="Token not found")
    
    # 检查令牌是否已过期
    if datetime.utcnow() > reset_tokens[token]["expires"]:
        raise HTTPException(status_code=400, detail="Token has expired")
    
    return {"message": "Password reset page"}

# 路由：完成密码重置
@app.post("/complete_reset_password/")
async def complete_reset_password(token: str = Query(..., description="Password reset token"), new_password: str = Query(..., description="New password")):
    # 检查令牌的有效性
    if token not in reset_tokens:
        raise HTTPException(status_code=404, detail="Token not found")
    
    # 检查令牌是否已过期
    if datetime.utcnow() > reset_tokens[token]["expires"]:
        raise HTTPException(status_code=400, detail="Token has expired")
    
    # 更新用户的密码（示例中只是输出新密码，实际应该存储哈希后的密码）
    email = reset_tokens[token]["email"]
    print(f"Password reset for {email}. New password: {new_password}")
    
    # 在实际应用中，这里应该将新密码保存到用户帐户中（通常是哈希后的密码）
    
    # 完成密码重置后，删除令牌
    del reset_tokens[token]
    
    return {"message": "Password reset completed"}
